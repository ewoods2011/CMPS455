// addrspace.cc 
//	Routines to manage address spaces (executing user programs).
//
//	In order to run a user program, you must:
//
//	1. link with the -N -T 0 option 
//	2. run coff2noff to convert the object file to Nachos format
//		(Nachos object code format is essentially just a simpler
//		version of the UNIX executable object code format)
//	3. load the NOFF file into the Nachos file system
//		(if you haven't implemented the file system yet, you
//		don't need to do this last step)
//
// Copyright (c) 1992-1993 The Regents of the University of California.
// All rights reserved.  See copyright.h for copyright notice and limitation 
// of liability and disclaimer of warranty provisions.

#include "copyright.h"
#include "system.h"
#include "addrspace.h"
#include "noff.h"
#ifdef HOST_SPARC
#include <strings.h>
#include "threadtest.h"
#endif

#define ORIGINALWAY 1

enum InputType {INT, DEC, CHAR, NEGDEC, NEGINT, UNEXPECTED};
InputType EvaluateInput(char * input);
bool IsChar(char a);




//----------------------------------------------------------------------
// SwapHeader
// 	Do little endian to big endian conversion on the bytes in the 
//	object file header, in case the file was generated on a little
//	endian machine, and we're now running on a big endian machine.
//----------------------------------------------------------------------

static void 
SwapHeader (NoffHeader *noffH)
{
	noffH->noffMagic = WordToHost(noffH->noffMagic);
	noffH->code.size = WordToHost(noffH->code.size);
	noffH->code.virtualAddr = WordToHost(noffH->code.virtualAddr);
	noffH->code.inFileAddr = WordToHost(noffH->code.inFileAddr);
	noffH->initData.size = WordToHost(noffH->initData.size);
	noffH->initData.virtualAddr = WordToHost(noffH->initData.virtualAddr);
	noffH->initData.inFileAddr = WordToHost(noffH->initData.inFileAddr);
	noffH->uninitData.size = WordToHost(noffH->uninitData.size);
	noffH->uninitData.virtualAddr = WordToHost(noffH->uninitData.virtualAddr);
	noffH->uninitData.inFileAddr = WordToHost(noffH->uninitData.inFileAddr);
}

//----------------------------------------------------------------------
// AddrSpace::AddrSpace
// 	Create an address space to run a user program.
//	Load the program from a file "executable", and set everything
//	up so that we can start executing user instructions.
//
//	Assumes that the object code file is in NOFF format.
//
//	First, set up the translation from program memory to physical 
//	memory.  For now, this is really simple (1:1), since we are
//	only uniprogramming, and we have a single unsegmented page table
//
//	"executable" is the file containing the object code to load into memory
//----------------------------------------------------------------------

AddrSpace::AddrSpace(OpenFile *executable)
{
    NoffHeader noffH;
    unsigned int i, size;
	
	int codePages, initPages;
	
    executable->ReadAt((char *)&noffH, sizeof(noffH), 0);
    if ((noffH.noffMagic != NOFFMAGIC) && 
		(WordToHost(noffH.noffMagic) == NOFFMAGIC))
    	SwapHeader(&noffH);
    ASSERT(noffH.noffMagic == NOFFMAGIC);

	// how big is address space?
    size = noffH.code.size + noffH.initData.size + noffH.uninitData.size 
			+ UserStackSize;	// we need to increase the size
						// to leave room for the stack
    numPages = divRoundUp(size, PageSize);
    codePages = divRoundUp(noffH.code.size, PageSize);
    initPages = divRoundUp(noffH.initData.size, PageSize);
    size = numPages * PageSize;

    ASSERT(numPages <= NumPhysPages);		// check we're not trying
						// to run anything too big --
						// at least until we have
						// virtual memory
	
	offset = 0; // An offset for physical memory page
	
	
	if (EvaluateInput(memAllocation) != INT) {
		printf("***Error, improper input for -M command found\n");
		currentThread->Finish();
	}
	//bitmap->Mark(3);
	
	if(atoi(memAllocation) == 1)
    	offset = FirstFit();
    else if(atoi(memAllocation) == 2)
    	offset = BestFit();
    else if(atoi(memAllocation) == 3)
    	offset = WorstFit();
    else
    {
		printf("***Error, improper input for -M command found\n");
		currentThread->Finish();
	}
	
	printf("Process %d is loading.\n", currentThread->getId());
	
	printf("Process %d needs %d memory frames \n", currentThread->getId(), numPages);
    printf("Process %d's Memory Before Allocation\n", currentThread->getId());
    bitmap->Print();
    	
	// Mark the bitmap for every page taken up.
	if(numPages <= bitmap->MaxSpace())  // Make sure there are enough clear pages to fit
	{
		for (int j = offset; j < offset + numPages; j++)
    		bitmap->Mark(j);
	}
	else {
		printf("Not enough space to run process.\n");
		printf("Exiting this process\n");
		// If there isn't enough space, just finish the thread
		currentThread->Finish();
	}
		
		
		
	
	
    DEBUG('a', "Initializing address space, num pages %d, size %d\n", 
					numPages, size);
// first, set up the translation 
    pageTable = new TranslationEntry[numPages];
    for (i = 0; i < numPages; i++) {
	pageTable[i].virtualPage = i;	// for now, virtual page # = phys page #
	pageTable[i].physicalPage = i + offset;
	pageTable[i].valid = TRUE;
	pageTable[i].use = FALSE;
	pageTable[i].dirty = FALSE;
	pageTable[i].readOnly = FALSE;  // if the code segment was entirely on 
					// a separate page, we could set its 
					// pages to be read-only
    }
    
// zero out the entire address space, to zero the unitialized data segment 
// and the stack segment
// TODO LOOK UP MEMSET(address, size, 0)

    memset(machine->mainMemory + offset * PageSize, 0, size);
    

    printf("Process %d zeroing out the address space and stack\n", currentThread->getId());

	//Read in page by page into main memory instaed of the entirety of the size
// then, copy in the code and data segments into memory
	printf("Process %d, copies the code and data into memory\n", currentThread->getId());

#ifdef ORIGINALWAY
	if (noffH.code.size > 0) {
    	    DEBUG('a', "Initializing code segment, at 0x%x, size %d\n", 
				noffH.code.virtualAddr, noffH.code.size);
        	executable->ReadAt(&(machine->mainMemory[noffH.code.virtualAddr]),
				noffH.code.size, noffH.code.inFileAddr);
	    }
    	if (noffH.initData.size > 0) {
    	    DEBUG('a', "Initializing data segment, at 0x%x, size %d\n", 
				noffH.initData.virtualAddr, noffH.initData.size);
    	    executable->ReadAt(&(machine->mainMemory[noffH.initData.virtualAddr]),
				noffH.initData.size, noffH.initData.inFileAddr);
    	}
#endif
#ifdef OLDSTUPIDWAY
	if (noffH.code.size > 0) {
		executable->ReadAt(&(machine->mainMemory[noffH.code.virtualAddr + (offset * PageSize)]),
				noffH.code.size, noffH.code.inFileAddr);
	}
	
	if (noffH.initData.size > 0) {
		executable->ReadAt(&(machine->mainMemory[noffH.initData.virtualAddr + (offset * PageSize)]),
				noffH.initData.size, noffH.code.inFileAddr);
	}
#endif
	
#ifdef FORLOOP
	//printf("\nPAGE SIZE: %d\n\n", PageSize);
	//printf("\nCODE PAGES: %d\n\n", codePages);

	for (int j = 0; j < codePages; j++) {
	    if (noffH.code.size > 0) {
    	    DEBUG('a', "Initializing code segment, at 0x%x, size %d\n", 
				noffH.code.virtualAddr, noffH.code.size);
				
				
        	executable->ReadAt(&(machine->mainMemory[noffH.code.virtualAddr + (offset * PageSize) + (j * PageSize) ]),
				PageSize, noffH.code.inFileAddr );
				
				
			//printf("\nINDEX: %d\n\n", noffH.code.virtualAddr + (offset) + (j * PageSize));
			//printf("\nMainMemory: %s\n\n", &(machine->mainMemory[noffH.code.virtualAddr + (offset * PageSize)]));
			//printf("\nNOFF CODE ADDR: %d\n\n", noffH.code.inFileAddr);
    	}
    }
    
    //printf("\nINIT PAGES: %d\n\n", initPages);
    for (int j = 0; j < initPages; j++) { 
    if (noffH.initData.size > 0) {
        DEBUG('a', "Initializing data segment, at 0x%x, size %d\n", 
			noffH.initData.virtualAddr, noffH.initData.size);
			
        executable->ReadAt(&(machine->mainMemory[noffH.initData.virtualAddr + (offset * PageSize) + (j * PageSize)]),
			PageSize, noffH.initData.inFileAddr);
			
		//printf("\nNOFF INIT ADDR: %d\n\n", noffH.initData.inFileAddr);
    }
    }
#endif
    printf("Process %d Memory allocation succeeds!\n", currentThread->getId());

	
    printf("Process %d Memory After Allocation\n", currentThread->getId());
    bitmap->Print();

}

//----------------------------------------------------------------------
// AddrSpace::~AddrSpace
// 	Dealloate an address space.  Nothing for now!
//----------------------------------------------------------------------

AddrSpace::~AddrSpace()
{
	printf("Memory Before Deallocation\n");
    bitmap->Print();

	for (int j = offset; j < offset + numPages; j++)
    	bitmap->Clear(j);
    	
	printf("Memory After Deallocation\n");
    bitmap->Print();
    
    delete pageTable;
}

//----------------------------------------------------------------------
// AddrSpace::InitRegisters
// 	Set the initial values for the user-level register set.
//
// 	We write these directly into the "machine" registers, so
//	that we can immediately jump to user code.  Note that these
//	will be saved/restored into the currentThread->userRegisters
//	when this thread is context switched out.
//----------------------------------------------------------------------

void
AddrSpace::InitRegisters()
{
    int i;

    for (i = 0; i < NumTotalRegs; i++)
	machine->WriteRegister(i, 0);

    // Initial program counter -- must be location of "Start"
    machine->WriteRegister(PCReg, 0);	

    // Need to also tell MIPS where next instruction is, because
    // of branch delay possibility
    machine->WriteRegister(NextPCReg, 4);

   // Set the stack register to the end of the address space, where we
   // allocated the stack; but subtract off a bit, to make sure we don't
   // accidentally reference off the end!
    machine->WriteRegister(StackReg, numPages * PageSize - 16);
    DEBUG('a', "Initializing stack register to %d\n", numPages * PageSize - 16);
}

//----------------------------------------------------------------------
// AddrSpace::SaveState
// 	On a context switch, save any machine state, specific
//	to this address space, that needs saving.
//
//	For now, nothing!
//----------------------------------------------------------------------

void AddrSpace::SaveState() 
{}

//----------------------------------------------------------------------
// AddrSpace::RestoreState
// 	On a context switch, restore the machine state so that
//	this address space can run.
//
//      For now, tell the machine where to find the page table.
//----------------------------------------------------------------------

void AddrSpace::RestoreState() 
{
    machine->pageTable = pageTable;
    machine->pageTableSize = numPages;
}

int AddrSpace::FirstFit()
{
	printf("First-fit algorithm is selected for memory allocation\n");
	//Need to find the first block of numPages space
	int startPoint = 0;
	int count = 0;
	
	for(int i = 0; i < bitmap->getNumBits(); i++){
		if(bitmap->Test(i)){
			startPoint = i+1;
			count = 0;	
			}	
		else{
			count++;
			if(count == numPages)
				return startPoint;
		}
	}
	
	return startPoint;
}

int AddrSpace::BestFit()
{
	printf("Best-fit algorithm is selected for memory allocation\n");
	int startPoint = 0;
	int count = 0;
	int smallestCount = bitmap->getNumBits();
	
	for(int i = 0; i < bitmap->getNumBits(); i++){
		if(bitmap->Test(i) || i == bitmap->getNumBits() - 1){
			if(count < smallestCount && count >= numPages){
				startPoint = i - count;	
				smallestCount = i - startPoint;	
			}
			count = 0;	
			}	
		else{
			count++;
		}
	}
	return startPoint;
}

int AddrSpace::WorstFit()
{
	printf("Worst-fit algorithm is selected for memory allocation\n");
	int startPoint = 0;
	int count = 0;
	int largestCount = 0;
	
	for(int i = 0; i < bitmap->getNumBits(); i++){
		if(bitmap->Test(i) || i == bitmap->getNumBits() - 1){
			if(count > largestCount && count >= numPages){
				startPoint = i - count;	
				largestCount = i - startPoint;	
			}
			count = 0;	
			}	
		else{
			count++;
		}
	}
	return startPoint;

}

